AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy API Gateway, a Lambda function, and an SQS queue

Parameters:
  Stage:
    Type: String
    Default: beta
    Description: Deployment stage name

Resources:
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Stage}-DLQ"

  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Stage}-MessageQueue"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
  
  VoiceQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Stage}-VoiceQueue"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3

  RouterFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendMessageToSQSQueue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt MessageQueue.Arn
        - PolicyName: LambdaAPIGatewayInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - lambda:InvokeFunction
                Resource: "*"

  RouterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging

          logger = logging.getLogger()

          def lambda_handler(event, context):
              sqs = boto3.client('sqs')

              message_body = event['body']
              message = json.loads(message_body)
              
              has_voice = (
                  'voice' in message.get("message", {}) or 
                  'voice' in message.get("message", {}).get("reply_to_message", {})
              )
              
              queue_url = os.getenv('VOICE_QUEUE_URL') if has_voice else \
                          os.getenv('MESSAGE_QUEUE_URL')
              
              sqs.send_message(
                  QueueUrl=queue_url,
                  MessageBody=json.dumps(event['body'])
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps('Message sent to SQS queue')
              }
      Handler: index.lambda_handler
      Role: !GetAtt RouterFunctionExecutionRole.Arn
      Runtime: python3.10
      Environment:
        Variables:
          MESSAGE_QUEUE_URL: !Ref MessageQueue
          VOICE_QUEUE_URL: !Ref VoiceQueue

  BotMessageAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${Stage}-BotMessageAPI"
      Description: An API Gateway with a single POST method for bot messages
      FailOnWarnings: 'true'

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Stage
      Description: !Sub "${Stage} stage for BotMessageAPI"
      RestApiId: !Ref BotMessageAPI
      DeploymentId: !Ref ApiGatewayDeployment
  
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MethodPostMessage
    Properties:
      RestApiId: !Ref BotMessageAPI
      Description: "Deployment for the BotMessageAPI"

  ResourceMessage:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BotMessageAPI
      ParentId: !GetAtt BotMessageAPI.RootResourceId
      PathPart: message

  MethodPostMessage:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ResourceMessage
      RestApiId: !Ref BotMessageAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  LambdaPermissionForAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RouterFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BotMessageAPI}/*/POST/message"

Outputs:
  ApiGatewayInvokeURL:
    Description: "Invoke URL for API Gateway"
    Value: !Sub "https://${BotMessageAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/message"
  SQSQueueURL:
    Description: "URL for the SQS Queue"
    Value: !Ref MessageQueue
  SQSQueueARN:
    Description: "ARN for the SQS Queue"
    Value: !GetAtt MessageQueue.Arn
  ApiEndpoint:
    Description: "URL for the deployed API stage"
    Value: !Sub "https://${BotMessageAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
