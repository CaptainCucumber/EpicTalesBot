AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LambdaFunctionS3Bucket:
    Type: String
    Description: The S3 bucket where the Lambda function code is stored.

  LambdaFunctionS3Key:
    Type: String
    Description: The S3 key of the Lambda function code ZIP file.

Resources:
  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 540 # Set to at least 6 times the Lambda function timeout

  MessageQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MessageQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'sqs:SendMessage'
            Resource: !GetAtt MessageQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref WebhookApi

  WebhookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'WebhookApi'

  MessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebhookApi
      ParentId: !GetAtt 'WebhookApi.RootResourceId'
      PathPart: 'message'

  MessageMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebhookApi
      ResourceId: !Ref MessageResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${MessageQueue.QueueName}'
        Credentials: !GetAtt ApiGatewayRole.Arn
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        RequestTemplates:
          application/json: !Sub 'Action=SendMessage&MessageBody=$util.urlEncode("$input.body")'
        IntegrationResponses:
            - StatusCode: "200"
              ResponseTemplates:
                application/json: ""
              SelectionPattern: "2\\d{2}"  # Regex for 200-series response
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: "Empty"  # Assuming "Empty" model is defined in API Gateway

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt MessageQueue.Arn

  MargaritaPetrovnaBotFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: bot_handler.lambda_handler
      Runtime: python3.10
      Code:
        S3Bucket: !Ref LambdaFunctionS3Bucket
        S3Key: !Ref LambdaFunctionS3Key
      MemorySize: 128
      Timeout: 90
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt MessageQueue.Arn
              - Effect: Allow
                Action: logs:*
                Resource: 'arn:aws:logs:*:*:*'

  # CloudWatch Log Group for API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${WebhookApi}'

  # CloudWatch Log Group for Lambda Function
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${MargaritaPetrovnaBotFunction}'
      RetentionInDays: 7 # Optional: Set log retention period

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MessageMethod # Ensure that this deployment happens after the method is created
    Properties:
      RestApiId: !Ref WebhookApi
      # StageName: prod # Uncomment if you want to create a stage at deployment time
      # Important: To trigger a new deployment, change this description with every update
      Description: !Sub "Deployment at ${AWS::StackName}-${AWS::Region}-${AWS::StackId}"

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      Description: Production Stage
      RestApiId: !Ref WebhookApi
      DeploymentId: !Ref ApiGatewayDeployment
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingRateLimit: 60
          ThrottlingBurstLimit: 5
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength", "responseLatency":"$context.responseLatency", "userAgent":"$context.identity.userAgent", "apiId":"$context.apiId", "errorMessage":"$context.error.message", "errorType":"$context.error.responseType"}'

  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MessageQueue.Arn
      FunctionName: !Ref MargaritaPetrovnaBotFunction
      Enabled: true
      BatchSize: 1 # One Lambda execution per message. Otherwise it might take too long to process a request.
